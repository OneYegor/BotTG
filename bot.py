import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler
)
import requests
import os

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ========== #
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GOOGLE_SCRIPT_URL = os.getenv("GOOGLE_SCRIPT_URL")  # URL Google Apps Script
SECRET_TOKEN = os.getenv("SECRET_TOKEN")  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
ACCOUNTS = ["–°–±–µ—Ä", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "–ê–ª—å—Ñ–∞", "–ú–¢–°", "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_ACTION, ENTER_AMOUNT, SELECT_ACCOUNT = range(3)

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ========== #
def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    buttons = [["üíµ –î–æ—Ö–æ–¥", "üí∏ –†–∞—Å—Ö–æ–¥"], ["üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å"]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    
    update.message.reply_text(
        "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    return SELECT_ACTION

def handle_action(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    text = update.message.text
    user_data = context.user_data

    if text == "üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å":
        return get_balance(update, context)
    else:
        user_data["type"] = "–¥–æ—Ö–æ–¥" if "–î–æ—Ö–æ–¥" in text else "—Ä–∞—Å—Ö–æ–¥"
        update.message.reply_text("‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=ReplyKeyboardRemove())
        return ENTER_AMOUNT

def handle_amount(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    user_data = context.user_data
    text = update.message.text

    try:
        amount = float(text.replace(",", "."))
        if amount <= 0:
            raise ValueError
            
        user_data["amount"] = amount
        
        buttons = [ACCOUNTS[i:i+2] for i in range(0, len(ACCOUNTS), 2)]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        update.message.reply_text("üè¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç:", reply_markup=reply_markup)
        return SELECT_ACCOUNT

    except (ValueError, TypeError):
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return ENTER_AMOUNT

def handle_account(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞"""
    user_data = context.user_data
    account = update.message.text

    if account not in ACCOUNTS:
        update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return SELECT_ACCOUNT

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É
    payload = {
        "token": SECRET_TOKEN,
        "type": user_data["type"],
        "amount": user_data["amount"],
        "account": account
    }

    try:
        response = requests.post(GOOGLE_SCRIPT_URL, json=payload)
        if "‚úÖ" in response.text:
            update.message.reply_text(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                f"–°—á–µ—Ç: {account}\n"
                f"–°—É–º–º–∞: {user_data['amount']} —Ä—É–±.\n"
                f"–¢–∏–ø: {user_data['type']}"
            )
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        update.message.reply_text("üö´ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    user_data.clear()
    return start(update, context)

def get_balance(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        response = requests.get(GOOGLE_SCRIPT_URL)
        update.message.reply_text(response.text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        update.message.reply_text("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    
    return start(update, context)

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    context.user_data.clear()
    update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return start(update, context)

def main():
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )

    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_ACTION: [
                MessageHandler(Filters.regex(r'^(üíµ –î–æ—Ö–æ–¥|üí∏ –†–∞—Å—Ö–æ–¥|üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å)$'), handle_action)
            ],
            ENTER_AMOUNT: [
                MessageHandler(Filters.text & ~Filters.command, handle_amount)
            ],
            SELECT_ACCOUNT: [
                MessageHandler(Filters.text & ~Filters.command, handle_account)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    dispatcher.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()